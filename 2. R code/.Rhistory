setwd("~/Documents/LPPP 5540")
source("gen_qui_R.R")
library(stargazer)
setwd("/Volumes/PIDL19")
dss <- readRDS("dss.rds")
dss2 <- dss %>%
filter(fc_enter == "Yes") %>%
filter(race %in% c("White", "Black", "MultiRace")) %>%
mutate(care_structure2 = fct_recode(care_structure,
"Single" = "Single mom",
"Single" = "Single dad",
"Dual" = "Married couple",
"Dual" = "Unmarried couple"),
foster_structure2 = fct_recode(foster_structure,
"Single" = "Single mom",
"Single" = "Single dad",
"Dual" = "Married couple",
"Dual" = "Unmarried couple")) %>%
filter(foster_structure2 != 'Not applicable')
dss2$race <- droplevels(dss2$race)
# set color palette
colorviz3 <- c("#b25590","#e35d7c","#fe785b")
colorviz5 <- c("#384c7d","#755391","#b25590","#e35d7c","#fe785b")
# caregiver model with race
care_model <- glm(care_structure2 ~ race, data = dss2, family = "binomial")
care_app1 <- gen_qoi(dss2, "race", care_model)
care_app1
# foster model with race
foster_model <- glm(foster_structure2 ~ race, data = dss2, family = "binomial")
foster_app1 <- gen_qoi(dss2, "race", foster_model)
foster_app1
# reorder factors
care_app1 <- mutate(care_app1,
group=fct_relevel(group, "White", "Black", "MultiRace"),
group=fct_rev(group))
foster_app1 <- mutate(foster_app1,
group=fct_relevel(group, "White", "Black", "MultiRace"),
group=fct_rev(group))
# generate plots
care_app1_plot <- ggplot(care_app1, aes(x = group, y = outcome, color=group)) +
geom_point(size=4) +
geom_pointrange(aes(ymin = lower, ymax=upper)) +
coord_flip() +
labs(title="Probability of Coming From a Single Parent Home",
x="Race",
y="Probability of Single Parent",
color= "Race",
caption = "Note: error bars are 90% credible intervals") +
expand_limits(y= 0) +
scale_color_manual(values=colorviz3)
care_app1_plot
foster_app1_plot <- ggplot(foster_app1, aes(x = group, y = outcome, color=group)) +
geom_point(size=4) +
geom_pointrange(aes(ymin = lower, ymax=upper)) +
coord_flip() +
labs(title="Probability of Being Placed in a Single Parent Foster Home",
x="Race",
y="Probability of Single Parent",
color= "Race",
caption = "Note: error bars are 90% credible intervals") +
expand_limits(y= 0) +
scale_color_manual(values=colorviz3)
foster_app1_plot
##MODEL: Ever screened in
screen1 <- glm(ever_screened ~ race_ethn + gender + agemiss + age2,
data=dss, na.action=na.omit, family=binomial(link="logit"))
###MODELS
#Recoding Age
dss <- dss %>%
mutate(age2 = ifelse(is.na(age_ref1), 0, age_ref1),
agemiss = if_else(is.na(age_ref1), 1, 0))
dss <- dss %>% filter(race %in% c("White", "Black", "MultiRace", "Hispanic", "Asian"))
##MODEL: Ever screened in
screen1 <- glm(ever_screened ~ race_ethn + gender + agemiss + age2,
data=dss, na.action=na.omit, family=binomial(link="logit"))
summary(screen1)
anova(screen1, type = 3)
screen2 <- glm(ever_screened ~ race_ethn + gender + agemiss + age2 + ment_ab + phys_ab + phys_neg + sex_ab + substance_ex,
data=dss, na.action=na.omit, family=binomial(link="logit"))
summary(screen2)
anova(screen2, type = 3)
screen3 <- glm(ever_screened ~ race_ethn + gender + agemiss + age2 + ment_ab + phys_ab + phys_neg + sex_ab + substance_ex + numref,
data=dss, na.action=na.omit, family=binomial(link="logit"))
summary(screen3)
# Generating predicted values from the "screen3" model
screen3_pred <- predicts(screen3, "F;F(2);0;8;0;0;0;0;0;2", sim.count = 1000, conf.int = 0.90, set.seed = 2238)
screen3_pred
screen3_pred
# Plotting predicted values
screen3_plot <- ggplot(screen3_pred, aes(x = race_ethn, y = mean, color=race_ethn)) +
geom_point(size=4) +
geom_pointrange(aes(ymin = lower, ymax=upper)) +
coord_flip() +
labs(title="Probability of Being Screened In by Race/Ethnicity",
x="Race/Ethnicity",
y="Probability",
color= "Race",
caption = "Note: error bars are 90% confidence intervals") +
scale_color_manual(values=colorviz5)
screen3_plot
##MODEL: Ever Investigated
dss_screen_only <- dss %>%
filter(ever_screened == "Yes") %>%
filter(race %in% c("White", "Black", "MultiRace"))
investigated1 <- glm(as.factor(ever_inv2) ~ race + gender + agemiss + age2 + ment_ab + phys_ab + phys_neg + sex_ab + substance_ex + numref,
data=dss_screen_only, na.action=na.omit, family=binomial(link="logit"))
summary(investigated1)
anova(investigated1, type = 3)
# Generating predicted values from the "investigated1" model
investigated1_pred <- predicts(investigated1, "F;F(2);0;8;0;0;0;0;0;2", sim.count = 1000, conf.int = 0.90, set.seed = 2238)
investigated1_pred
# Plotting predicted values
investigated1_plot <- ggplot(investigated1_pred, aes(x = race, y = mean, color=race)) +
geom_point(size=4) +
geom_pointrange(aes(ymin = lower, ymax=upper)) +
coord_flip() +
labs(title="Probability of Being Investigated by Race",
x="Race",
y="Probability",
color= "Race",
caption = "Note: error bars are 90% confidence intervals") +
scale_color_manual(values=colorviz3)
investigated1_plot
##MODEL: Ever a Finding
dss_inv_only <- dss %>%
filter(ever_inv2 == "Yes") %>%
filter(race %in% c("White", "Black", "MultiRace"))
find_ologit1 <- polr(ever_find ~ race + gender + agemiss + age2,
data = dss_inv_only, Hess = TRUE)
summary(find_ologit1)
find_ologit1.coef <- data.frame(coef(summary(find_ologit1)))
find_ologit1.coef$pval = round((pnorm(abs(find_ologit1.coef$t.value), lower.tail = FALSE) * 2),2)
find_ologit1.coef
find_ologit2 <- polr(ever_find ~ race + gender + agemiss + age2 + ment_ab + phys_ab + phys_neg + sex_ab + substance_ex,
data = dss_inv_only, Hess = TRUE)
summary(find_ologit2)
find_ologit2.coef <- data.frame(coef(summary(find_ologit2)))
find_ologit2.coef$pval = round((pnorm(abs(find_ologit2.coef$t.value), lower.tail = FALSE) * 2),2)
find_ologit2.coef
find_ologit3 <- polr(ever_find ~ race + gender + agemiss + age2 + ment_ab + phys_ab + phys_neg + sex_ab + substance_ex + numref,
data = dss_inv_only, Hess = TRUE)
summary(find_ologit3)
find_ologit3.coef <- data.frame(coef(summary(find_ologit3)))
find_ologit3.coef$pval = round((pnorm(abs(find_ologit3.coef$t.value), lower.tail = FALSE) * 2),2)
find_ologit3.coef
##MODEL: Ever Unsafe
unsafe1 <- glm(ever_unsafe ~ race + gender + agemiss + age2,
data=dss_screen_only, na.action=na.omit, family=binomial(link="logit"))
summary(unsafe1)
anova(unsafe1, type = 3)
unsafe2 <- glm(ever_unsafe ~ race + gender + agemiss + age2 + ment_ab + phys_ab + phys_neg + sex_ab + substance_ex,
data=dss_screen_only, na.action=na.omit, family=binomial(link="logit"))
summary(unsafe2)
anova(unsafe2, type = 3)
unsafe3 <- glm(ever_unsafe ~ race + gender + agemiss + age2 + ment_ab + phys_ab + phys_neg + sex_ab + substance_ex + numref,
data=dss_screen_only, na.action=na.omit, family=binomial(link="logit"))
summary(unsafe3)
anova(unsafe3, type = 3)
# Generating predicted values from the "unsafe3" model
unsafe3_pred <- predicts(unsafe3, "F;F(2);0;8;0;0;0;0;0;2", sim.count = 1000, conf.int = 0.90, set.seed = 2238)
unsafe3_pred
# Plotting predicted values
unsafe3_plot <- ggplot(unsafe3_pred, aes(x = race, y = mean, color=race)) +
geom_point(size=4) +
geom_pointrange(aes(ymin = lower, ymax=upper)) +
coord_flip() +
labs(title="Probability of Being Determined to be Unsafe by Race",
x="Race",
y="Probability",
color= "Race",
caption = "Note: error bars are 90% confidence intervals") +
scale_color_manual(values=colorviz3)
unsafe3_plot
library(tidyverse)
library(lubridate)
library(RColorBrewer)
library(MASS)
library(glm.predict)
source("gen_qui_R.R")
setwd("~/Documents/LPPP 5540")
source("gen_qui_R.R")
setwd("/Volumes/PIDL19")
dss <- readRDS("dss.rds")
# recoding care_structure and foster_structure to two levels instead of four
dss2 <- dss %>%
filter(fc_enter == "Yes") %>%
filter(race %in% c("White", "Black", "MultiRace")) %>%
mutate(care_structure2 = fct_recode(care_structure,
"Single" = "Single mom",
"Single" = "Single dad",
"Dual" = "Married couple",
"Dual" = "Unmarried couple"),
foster_structure2 = fct_recode(foster_structure,
"Single" = "Single mom",
"Single" = "Single dad",
"Dual" = "Married couple",
"Dual" = "Unmarried couple")) %>%
filter(foster_structure2 != 'Not applicable')
dss2$race <- droplevels(dss2$race)
# set color palette
colorviz3 <- c("#b25590","#e35d7c","#fe785b")
library(tidyverse)
library(gridExtra)
library(lubridate)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(MASS)
library(glm.predict)
library(stargazer)
load("BCH_clean.RData")
setwd("~/Downloads")
library(tidyverse)
library(gridExtra)
library(lubridate)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(MASS)
library(glm.predict)
library(stargazer)
load("BCH_clean.RData")
setwd("~/Documents/LPPP 5540")
load("BCH_clean.RData")
load("BCH_Cleaning.RData")
setwd("~/Documents/LPPP 5540")
load("BCH_Cleaning.RData")
library(tidyverse)
library(gridExtra)
library(lubridate)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(MASS)
library(glm.predict)
library(stargazer)
source("gen_qui_R.R")
setwd("/Volumes/PIDL19")
dss <- readRDS("dss.rds")
#recoding care_structure and foster_structure
dss2 <- dss %>%
filter(fc_enter == "Yes") %>%
filter(race %in% c("White", "Black", "MultiRace")) %>%
mutate(care_structure2 = fct_recode(care_structure,
"Single" = "Single mom",
"Single" = "Single dad",
"Dual" = "Married couple",
"Dual" = "Unmarried couple"),
foster_structure2 = fct_recode(foster_structure,
"Single" = "Single mom",
"Single" = "Single dad",
"Dual" = "Married couple",
"Dual" = "Unmarried couple")) %>%
filter(foster_structure2 != 'Not applicable')
#recoding age
dss <- dss %>%
mutate(age2 = ifelse(is.na(age_ref1), 0, age_ref1),
agemiss = if_else(is.na(age_ref1), 1, 0))
#recoding race
dss <- dss %>%
filter(race %in% c("White", "Black", "MultiRace", "Hispanic", "Asian"))
#drop levels
dss2$race <- droplevels(dss2$race)
save.image("BCH_clean.RData")
load("BCH_clean.RData")
setwd("/Volumes/PIDL19")
# set color palette
colorviz3 <- c("#b25590","#e35d7c","#fe785b")
colorviz5 <- c("#384c7d","#755391","#b25590","#e35d7c","#fe785b")
care_model <- glm(care_structure2 ~ race, data = dss2, family = "binomial")
care_app1 <- gen_qoi(dss2, "race", care_model)
care_app1
# foster model with race
foster_model <- glm(foster_structure2 ~ race, data = dss2, family = "binomial")
foster_app1 <- gen_qoi(dss2, "race", foster_model)
foster_app1
# reorder factors
care_app1 <- mutate(care_app1,
group=fct_relevel(group, "White", "Black", "MultiRace"),
group=fct_rev(group))
foster_app1 <- mutate(foster_app1,
group=fct_relevel(group, "White", "Black", "MultiRace"),
group=fct_rev(group))
# generate plots
care_app1_plot <- ggplot(care_app1, aes(x = group, y = outcome, color=group)) +
geom_point(size=4) +
geom_pointrange(aes(ymin = lower, ymax=upper)) +
coord_flip() +
labs(title="Probability of Coming From a Single Parent Home",
x="Race",
y="Probability of Single Parent",
color= "Race",
caption = "Note: error bars are 90% credible intervals") +
expand_limits(y= 0) +
scale_color_manual(values=colorviz3) +
theme(legend.position= 'none')
care_app1_plot
foster_app1_plot <- ggplot(foster_app1, aes(x = group, y = outcome, color=group)) +
geom_point(size=4) +
geom_pointrange(aes(ymin = lower, ymax=upper)) +
coord_flip() +
labs(title="Probability of Being Placed in a Single Parent Foster Home",
x="Race",
y="Probability of Single Parent",
color= "Race",
caption = "Note: error bars are 90% credible intervals") +
expand_limits(y= 0) +
scale_color_manual(values=colorviz3) +
theme(legend.position= 'none')
foster_app1_plot
foster_app1_plot <- ggplot(foster_app1, aes(x = group, y = outcome, color=group)) +
geom_point(size=4) +
geom_pointrange(aes(ymin = lower, ymax=upper)) +
coord_flip() +
labs(title="Probability of Being Placed in a Single Parent Foster Home",
x="Race",
y="Probability of Single Parent",
caption = "Note: error bars are 90% credible intervals") +
expand_limits(y= 0) +
scale_color_manual(values=colorviz3) +
theme(legend.position= 'none',
plot.title = element_text(hjust = 0.5))
foster_app1_plot
# generate plots
care_app1_plot <- ggplot(care_app1, aes(x = group, y = outcome, color=group)) +
geom_point(size=4) +
geom_pointrange(aes(ymin = lower, ymax=upper)) +
coord_flip() +
labs(title="Probability of Coming From a Single Parent Home",
x="Race",
y="Probability of Single Parent",
caption = "Note: error bars are 90% credible intervals") +
expand_limits(y= 0) +
scale_color_manual(values=colorviz3) +
theme(legend.position= 'none',
plot.title = element_text(hjust = 0.5))
care_app1_plot
foster_app1_plot <- ggplot(foster_app1, aes(x = group, y = outcome, color=group)) +
geom_point(size=4) +
geom_pointrange(aes(ymin = lower, ymax=upper)) +
coord_flip() +
labs(title="Probability of Being Placed in a Single Parent Foster Home",
x="Race",
y="Probability of Single Parent",
caption = "Note: error bars are 90% credible intervals") +
expand_limits(y= 0) +
scale_color_manual(values=colorviz3) +
theme(legend.position= 'none',
plot.title = element_text(hjust = 0.5))
foster_app1_plot
care_app1_plot
update.packages(ask = FALSE, checkBuilt = TRUE)
which git
git --version
git config
xcode-select --install
which git
print("Welcome to R")
print('Hello World!')
# 1) NUMBERS -----
number_type <- 23
# 3 ways to view something
number_type   # just run the name of the object
print(number_type) #use the print() function
#highlight and run (often useful to not have extra pieces of code littering your script)
class(number_type)
# what about decimals
decimals_type <- 23.754643
class(decimals_type)
#sum
2 + 2
#substraction
4 - 9
#multiplication
3*2
#division
7/2
# OR
a <- 7
b <- 2
a/b
#we can change the number of decimals
round(a/b, 0)
#
pi
round(pi, 2)
#negation, change the sign of a number
-a
#square, cube, fourth power, etcetera
a^2
b^2
b^3
text1 <- 'Hello'
text1
text2 <- "World!"
text2
class(text2)
# we can try using the command c()
statement <- c("What", "is", "up", ?)
statement # is this what we wanted
# we can try using the command c()
statement <- c("What", "is", "up", "?")
statement # is this what we wanted
#instead we can use the concatenate function cat()
statement_together <- cat("What", "is", "up", "?")
class(statement_together)
class(statement)
??cat()
?cat()
#instead we can use the concatenate function cat()
statement_together <- cat("What", "is", "up", "?", sep="")
truth <- True
truth <- TRUE
truth <- T
class(truth)
# vs
truth_the_letter <- "T"
class(tru# demonstrate autofill) # and how to get out of an unfisnished command
falsehood <- FALSE
falsehood <- FALSE
falsehood
a <- 7
b <- 2
a > b # a greater than b
b >= a # b greater than or equal to a
b <= a # b smaller or equal to a
b == 2 #b is equals (==) 2
b == 50 #b is equals (==) 50
#what if we we use one equals
b = 30
b
# we define a new value to b. This is why we use <- ... to cut down on confusion.
b <- 2 # make b 2 again.
# a is not equals (!=)  23
a != 23
# We can evaluate that multiple conditions are true with and -> &
a != 23 & a < b
a != 23 & a > b
names <- c("Taryn", "Neil", "Diana", "Kenny", "Connor")
class(names)
country <- c( "SA", "SA", "Spain", "USA", "Canada")
SA_local <- c(T, T, F, F, F)
class(SA_local)
age <- c(21, 25, 27, 29, 31)
class(age)
dogs <- c(0, 2, 0, 1, 1)
gender <- c("F", "M", "F", "M", "M")
class(gender)
gender <- as.factor(c("F", "M", "F", "M", "M"))
class(gender)
role <- as.factor(c("Teacher", "Teacher", "TA", "TA", "TA"))
class(role)
teacher_country <- cbind(names, country) # column bind
teacher_country
#or
teacher_country <- rbind(names, country) # row bind
teacher_country
class(teacher_country)
matrix(c(1,2,3,4,5,6,7,8,9,10), nrow=2, ncol=5)
best_teachers <- data.frame(names, country, age, dogs, gender, role, stringsAsFactors = FALSE)
class(best_teachers)
best_teachers
View(best_teachers)
?data.frame
country <- c( "SA", "SA", "DRCongo", "USA", "Canada")
best_teachers <- data.frame(names, country, age, dogs, gender, role, stringsAsFactors = FALSE)
class(best_teachers)
best_teachers
# We access elements in a vector with brackets []
names[1] # returns the 1st name in the vector
names[4] # returns the 4th name
best_teachers[2,1] # will return the element in the 2nd row and first column
best_teachers[2,5] # will return the element in the 2nd row and first column
# we can get a whole row by leaving the column input blank
best_teachers[3, ]
# or we can get 2 or more rows
best_teachers[c(3,5), ] # get rows 3 and row 5
best_teachers[3:5, ]
# or
# we can get a whole column by leaving the row input blank
best_teachers[ ,2]
best_teachers[ ,3:5]
best_teachers[ ,c(1,3:5)]
#we can also remove columns and rows using -
best_teachers[-1 ,] # maybe we fired taryn
best_teachers[ ,-5] # maybe we dont think gender is a binary factor
# we can access columns using the column names
best_teachers[ , "dogs"]
best_teachers[ , c("names", "dogs")]
#another way to subset a column using column names $
best_teachers$names
best_teachers$role
#### we can use [ ] to replace elements in our lists or vector
best_teachers[1,4] <- 1   # taryn got a puppy. Woo hoo!
best_teachers
setwd("~/Documents/iXperience/2. R code")
#install the package "nycflights13"
install.packages('nycflights13')
# Load packages from library
# You have to load packages every session - like opening the app you downloaded to use its functions
library(tidyverse)
library(nycflights13)  #you can read about it here if you need (https://github.com/hadley/nycflights13)
# To install a package use the command install.packages () (OR ...)
# You only need to install packages once (like downloading an app)
# notice the inverted commas. The command wont work without them - try it and see.
install.packages("tidyverse")
library(lubridate)
library(nycflights13)  #you can read about it here if you need (https://github.com/hadley/nycflights13)
# Load packages from library
# You have to load packages every session - like opening the app you downloaded to use its functions
library(tidyverse)
setwd("~/Documents/iXperience/2. R code")
